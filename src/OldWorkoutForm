i/* mport React, { useState, useEffect } from 'react';
import { Fragment } from 'react/cjs/react.development';
import { nanoid } from 'nanoid';

import './styles/WorkoutForm.scss';
import settingsIcon from './images/icons/cog-solid.svg';
import backArrow from './images/icons/long-arrow-alt-left-solid.svg';

import Exercise from './Exercise';
import './styles/Exercise.scss';

function OldWorkoutForm(props) {
    const [isWorkoutSelected, setIsWorkoutSelected] = useState(true);
    const workoutRoutines = props.workoutRoutine.workouts;
    const filterExercises = () => workoutRoutines.filter(w => w.name === workout)[0].bodyparts
    .map((bp) => {
        const id = nanoid();
        return {name: bp.name, sets: Array(bp.sets).fill(0), id: id, key: id}
    });
    const [workout, setWorkout] = useState('Upper');
    const [exercises, setExercises] = useState(filterExercises());
    
    
    console.log(exercises);
    const addSet = (id) => {
        console.log(id)
        const newExercise = exercises.filter((ex) => ex.id === id)[0];
        newExercise.sets.push(0);
        const exercisesNew = exercises.filter((ex) => ex.id !== id);
        exercisesNew.push(newExercise);
        console.log(exercisesNew);
        setExercises(...exercisesNew);
    }
    const removeSet = (id) => {

    }
    // Event Handlers
    const handleChange = (e) => {
        setIsWorkoutSelected(true);
        setWorkout(e.target.value);
    }
    const handleAddExercise = (e) => {
        e.preventDefault();
    }
    const handleCancelWorkout = (e) => {
        e.preventDefault();
    }
    const handleFinishWorkout = (e) => {
        e.preventDefault();
    }

    const displayOptions = workoutRoutines.map((w) => 
        <option className="WorkoutForm-selector-option" value={w.name}>{w.name}</option>);

    const displayExercises = exercises.map((ex) => {
        return <Exercise name={ex.name} sets={ex.sets} id={ex.id} key={ex.id} addSet={addSet} />
    });

    const displayButtons = 
    <Fragment>
        <a onClick={handleAddExercise} className="WorkoutForm-button WorkoutForm-addExercise">add exercise</a>
        <a onClick={handleCancelWorkout} className="WorkoutForm-button WorkoutForm-cancelWorkout">cancel workout</a>
        <a onClick={handleFinishWorkout} className="WorkoutForm-button WorkoutForm-finishWorkout">finish workout</a>
    </Fragment>

    
    return (
        
        <div className='WorkoutForm'>
            <div className="flex">
                <h2 className='WorkoutForm-title title'>New Workout Log</h2>
                <div className="WorkoutForm-icons">
                <a href='/new' className='WorkoutForm-settings'>
                    <img src={backArrow} alt="settings" />
                </a>
                <a href='/new' className='WorkoutForm-settings'>
                    <img src={settingsIcon} alt="settings" />
                </a>
                </div>
            </div>
            <select name='workout-selector' className="WorkoutForm-selector" onChange={handleChange}>
                {displayOptions}
            </select>
            {(isWorkoutSelected) ? displayExercises : ''}
            {(isWorkoutSelected) ? displayButtons : ''}
           
        </div>
    )
}

export default OldWorkoutForm;
 */